%{
#include "yygrammar.h"
%}
%%
"EOF"          { return EOF;}
"NONE"          { return NONE;}
"ERROR"          { return ERROR;}
"FIRST_KEYWORD"          { return FIRST_KEYWORD;}
"ABSTRACT"          { return ABSTRACT;}
"AS"          { return AS;}
"ADD"          { return ADD;}
"BASE"          { return BASE;}
"BOOL"          { return BOOL;}
"BREAK"          { return BREAK;}
"BYTE"          { return BYTE;}
"CASE"          { return CASE;}
"CATCH"          { return CATCH;}
"CHAR"          { return CHAR;}
"CHECKED"          { return CHECKED;}
"CLASS"          { return CLASS;}
"CONST"          { return CONST;}
"CONTINUE"          { return CONTINUE;}
"DECIMAL"          { return DECIMAL;}
"DEFAULT"          { return DEFAULT;}
"DELEGATE"          { return DELEGATE;}
"DO"          { return DO;}
"DOUBLE"          { return DOUBLE;}
"ELSE"          { return ELSE;}
"ENUM"          { return ENUM;}
"EVENT"          { return EVENT;}
"EXPLICIT"          { return EXPLICIT;}
"EXTERN"          { return EXTERN;}
"FALSE"          { return FALSE;}
"FINALLY"          { return FINALLY;}
"FIXED"          { return FIXED;}
"FLOAT"          { return FLOAT;}
"FOR"          { return FOR;}
"FOREACH"          { return FOREACH;}
"GOTO"          { return GOTO;}
"IF"          { return IF;}
"IMPLICIT"          { return IMPLICIT;}
"IN"          { return IN;}
"INT"          { return INT;}
"INTERFACE"          { return INTERFACE;}
"INTERNAL"          { return INTERNAL;}
"IS"          { return IS;}
"LOCK"          { return LOCK;}
"LONG"          { return LONG;}
"NAMESPACE"          { return NAMESPACE;}
"NEW"          { return NEW;}
"NULL"          { return NULL;}
"OBJECT"          { return OBJECT;}
"OPERATOR"          { return OPERATOR;}
"OUT"          { return OUT;}
"OVERRIDE"          { return OVERRIDE;}
"PARAMS"          { return PARAMS;}
"PRIVATE"          { return PRIVATE;}
"PROTECTED"          { return PROTECTED;}
"PUBLIC"          { return PUBLIC;}
"READONLY"          { return READONLY;}
"REF"          { return REF;}
"RETURN"          { return RETURN;}
"REMOVE"          { return REMOVE;}
"SBYTE"          { return SBYTE;}
"SEALED"          { return SEALED;}
"SHORT"          { return SHORT;}
"SIZEOF"          { return SIZEOF;}
"STACKALLOC"          { return STACKALLOC;}
"STATIC"          { return STATIC;}
"STRING"          { return STRING;}
"STRUCT"          { return STRUCT;}
"SWITCH"          { return SWITCH;}
"THIS"          { return THIS;}
"THROW"          { return THROW;}
"TRUE"          { return TRUE;}
"TRY"          { return TRY;}
"TYPEOF"          { return TYPEOF;}
"UINT"          { return UINT;}
"ULONG"          { return ULONG;}
"UNCHECKED"          { return UNCHECKED;}
"UNSAFE"          { return UNSAFE;}
"USHORT"          { return USHORT;}
"USING"          { return USING;}
"VIRTUAL"          { return VIRTUAL;}
"VOID"          { return VOID;}
"VOLATILE"          { return VOLATILE;}
"WHERE"          { return WHERE;}
"WHILE"          { return WHILE;}
"ARGLIST"          { return ARGLIST;}
"PARTIAL"          { return PARTIAL;}
"ARROW"          { return ARROW;}
"FROM"          { return FROM;}
"FROM_FIRST"          { return FROM_FIRST;}
"JOIN"          { return JOIN;}
"ON"          { return ON;}
"EQUALS"          { return EQUALS;}
"SELECT"          { return SELECT;}
"GROUP"          { return GROUP;}
"BY"          { return BY;}
"LET"          { return LET;}
"ORDERBY"          { return ORDERBY;}
"ASCENDING"          { return ASCENDING;}
"DESCENDING"          { return DESCENDING;}
"INTO"          { return INTO;}
"INTERR_NULLABLE"          { return INTERR_NULLABLE;}
"EXTERN_ALIAS"          { return EXTERN_ALIAS;}
"REFVALUE"          { return REFVALUE;}
"REFTYPE"          { return REFTYPE;}
"MAKEREF"          { return MAKEREF;}
"ASYNC"          { return ASYNC;}
"AWAIT"          { return AWAIT;}
"GET"          { return GET;}
"SET"          { return SET;}
"OPEN_BRACE"          { return OPEN_BRACE;}
"CLOSE_BRACE"          { return CLOSE_BRACE;}
"OPEN_BRACKET"          { return OPEN_BRACKET;}
"CLOSE_BRACKET"          { return CLOSE_BRACKET;}
"OPEN_PARENS"          { return OPEN_PARENS;}
"CLOSE_PARENS"          { return CLOSE_PARENS;}
"DOT"          { return DOT;}
"COMMA"          { return COMMA;}
"COLON"          { return COLON;}
"SEMICOLON"          { return SEMICOLON;}
"TILDE"          { return TILDE;}
"PLUS"          { return PLUS;}
"MINUS"          { return MINUS;}
"BANG"          { return BANG;}
"ASSIGN"          { return ASSIGN;}
"OP_LT"          { return OP_LT;}
"OP_GT"          { return OP_GT;}
"BITWISE_AND"          { return BITWISE_AND;}
"BITWISE_OR"          { return BITWISE_OR;}
"STAR"          { return STAR;}
"PERCENT"          { return PERCENT;}
"DIV"          { return DIV;}
"CARRET"          { return CARRET;}
"INTERR"          { return INTERR;}
"DOUBLE_COLON"          { return DOUBLE_COLON;}
"OP_INC"          { return OP_INC;}
"OP_DEC"          { return OP_DEC;}
"OP_SHIFT_LEFT"          { return OP_SHIFT_LEFT;}
"OP_SHIFT_RIGHT"          { return OP_SHIFT_RIGHT;}
"OP_LE"          { return OP_LE;}
"OP_GE"          { return OP_GE;}
"OP_EQ"          { return OP_EQ;}
"OP_NE"          { return OP_NE;}
"OP_AND"          { return OP_AND;}
"OP_OR"          { return OP_OR;}
"OP_MULT_ASSIGN"          { return OP_MULT_ASSIGN;}
"OP_DIV_ASSIGN"          { return OP_DIV_ASSIGN;}
"OP_MOD_ASSIGN"          { return OP_MOD_ASSIGN;}
"OP_ADD_ASSIGN"          { return OP_ADD_ASSIGN;}
"OP_SUB_ASSIGN"          { return OP_SUB_ASSIGN;}
"OP_SHIFT_LEFT_ASSIGN"          { return OP_SHIFT_LEFT_ASSIGN;}
"OP_SHIFT_RIGHT_ASSIGN"          { return OP_SHIFT_RIGHT_ASSIGN;}
"OP_AND_ASSIGN"          { return OP_AND_ASSIGN;}
"OP_XOR_ASSIGN"          { return OP_XOR_ASSIGN;}
"OP_OR_ASSIGN"          { return OP_OR_ASSIGN;}
"OP_PTR"          { return OP_PTR;}
"OP_COALESCING"          { return OP_COALESCING;}
"OP_GENERICS_LT"          { return OP_GENERICS_LT;}
"OP_GENERICS_LT_DECL"          { return OP_GENERICS_LT_DECL;}
"OP_GENERICS_GT"          { return OP_GENERICS_GT;}
"LITERAL"          { return LITERAL;}
"IDENTIFIER"          { return IDENTIFIER;}
"OPEN_PARENS_LAMBDA"          { return OPEN_PARENS_LAMBDA;}
"OPEN_PARENS_CAST"          { return OPEN_PARENS_CAST;}
"GENERIC_DIMENSION"          { return GENERIC_DIMENSION;}
"DEFAULT_COLON"          { return DEFAULT_COLON;}
"OPEN_BRACKET_EXPR"          { return OPEN_BRACKET_EXPR;}
"EVAL_STATEMENT_PARSER"          { return EVAL_STATEMENT_PARSER;}
"EVAL_COMPILATION_UNIT_PARSER"          { return EVAL_COMPILATION_UNIT_PARSER;}
"EVAL_USING_DECLARATIONS_UNIT_PARSER"          { return EVAL_USING_DECLARATIONS_UNIT_PARSER;}
"DOC_SEE"          { return DOC_SEE;}
"GENERATE_COMPLETION"          { return GENERATE_COMPLETION;}
"COMPLETE_COMPLETION"          { return COMPLETE_COMPLETION;}
\r               { yypos++; /* adjust linenumber and skip newline */ }
\n               { yypos++; /* adjust linenumber and skip newline */ }
.                { printf("\n++ illegal token : %s ++", yytext); yyerror("illegal xyz token"); }
