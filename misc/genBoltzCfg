#!/usr/bin/env python

import random, string, StringIO, random, getopt
import os, subprocess, sys, tempfile
from sets import Set
import ParseCfg, Utils

class BoltzGrammarGenerator:

    def __init__(self):
        self.no_samples = None
        self.sing_prec = None
        self.no_nonterm = None
        self.no_term = None
        self.sym_type = None
        self.grammardir = None
        self.instance = None
        justlex=False
        uselex=False
        opts, args = getopt.getopt(sys.argv[1 : ], "hN:p:n:t:m:d:i:lL")
        for opt in opts:
            if opt[0] == "-N":
                self.no_samples=int(opt[1])
            elif opt[0] == "-p":
                self.sing_prec=float(opt[1])
            elif opt[0] == "-n":
                self.no_nonterm = int(opt[1])            
            elif opt[0] == "-t":
                self.no_term = int(opt[1])
            elif opt[0] == "-m":
                self.sym_type = opt[1]
            elif opt[0] == "-d":
                self.grammardir = opt[1]
            elif opt[0] == "-i":
                self.instance = opt[1]
            elif opt[0] == "-l":
                justlex=True    
            elif opt[0] == "-L":
                uselex=True         
            elif opt[0] == "-h":
                self.usage()
        

        if (self.no_samples == None) or \
           (self.sing_prec == None) or \
           (self.no_nonterm == None) or \
           (self.no_term == None) or \
           (self.sym_type == None) or \
           (self.grammardir == None):
            self.usage("Not enough arguments")  
            
        # we create the directory here.    
        if not os.path.exists(self.grammardir):
            os.makedirs(self.grammardir)

           
        if uselex:
            nt_f = open(self.grammardir  + "/" + "nonterms","r")
            nt_line = nt_f.readline()
            nt_f.close()
            t_f = open(self.grammardir  + "/" + "terms","r")
            t_line = t_f.readline()
            t_f.close()
            self.nonterms = nt_line.split(" | ")
            self.terms = t_line.split(" | ")
            print self.nonterms, self.terms
        else:
            self.nonterms,self.terms = Utils.genSymbols(self.sym_type, self.no_nonterm, self.no_term)
            print self.nonterms,self.terms
            
        self.terms_map = {('TK_' + i): i for i in self.terms}
                    
        
        if justlex:
            nonterms_s = (" | ").join(x for x in self.nonterms)
            terms_s = (" | ").join(x for x in self.terms_map.keys())
            # write them to file
            nt_f = open(self.grammardir  + "/" + "nonterms","w")
            nt_f.write(nonterms_s)
            nt_f.close()
            t_f = open(self.grammardir  + "/" + "terms","w")
            t_f.write(terms_s)
            t_f.close()
            sys.exit(0)            

        boltzprog = os.path.expandvars("${BOLTZ_PROG}")
        if not os.path.exists(boltzprog):
            sys.stderr.write("Can't locate Boltzmann CFG program. Check BOLTZ_PROG shell variable.\n")
            sys.exit(1)

        self.boltzExe = boltzprog                
        gdir = self.grammardir
        if self.instance != None:
            # we write to their respective instance
            gdir = os.path.join(gdir, str(self.instance))

        lf = Utils.genLex(self.terms_map,self.grammardir)
        tf = tempfile.mkstemp()[1]            
        i = 1
        _cnt=0
        while i <= self.no_samples:
            _cnt += 1
            sys.stdout.write(".");sys.stdout.flush()
            cfg = self.genCfg()
            Utils.write(cfg,self.terms_map,tf)
            if Utils.valid(tf,lf):
                gf = os.path.join(gdir, str(i) + ".acc")
                r = subprocess.call(["cp",tf,gf])
                if r != 0:
                    sys.stderr.write("Copy failed\n")
                    sys.exit(r)
                  
                sys.stdout.write("X");sys.stdout.flush()
                i+=1
                
            r = subprocess.call(["cp","/dev/null",tf])
            if r != 0:
                sys.stderr.write("Can't blank the temp file\n")
                sys.exit(1)
        print "no of samples tried: " , str(_cnt)
      
    def usage(self, msg=None):
        sys.stderr.write("genBoltz -d <grammar directory> -N <no of samples> " \
          "-p <precision in float> -n <no of nonterminals> -t <no of terminals> " \
          "-m <short|long> -b <geneate lex and make> -L <use lex> -i <instance no>\n\n")
        sys.exit(1)
    
        
    def genCfg(self):
        p = subprocess.Popen([self.boltzExe,str(1),str(self.sing_prec)], stdout=subprocess.PIPE)
        out = p.communicate()
        bz_cfg = out[0].splitlines()[0]
        rules=ParseCfg.parse(bz_cfg)
        _nonterms = self.nonterms + ['root']
        rules_dict = dict(zip(_nonterms,rules))

        return rules_dict
    
           

BoltzGrammarGenerator()

