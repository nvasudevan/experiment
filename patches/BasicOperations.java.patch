--- src/dk/brics/automaton/BasicOperations.java	2014-08-05 23:22:37.386329983 +0100
+++ src/dk/brics/automaton/BasicOperations.java.modified	2014-08-05 23:19:49.506333057 +0100
@@ -39,6 +39,11 @@
 import java.util.Map;
 import java.util.Set;
 
+import dk.brics.grammar.Grammar;
+import dk.brics.grammar.Production;
+import dk.brics.grammar.parser.Parser;
+import dk.brics.grammar.ambiguity.HorizontalOverlapString;
+
 /**
  * Basic automata operations.
  */
@@ -624,11 +629,141 @@
 			State q = queue.removeFirst();
 			String p = path.get(q);
 			if (q.accept == accepted) {
+                System.out.println("p.length: " + p.length());
+				if (best == null || p.length() < best.length() || (p.length() == best.length() && p.compareTo(best) < 0))
+					best = p;
+			} else 
+				for (Transition t : q.getTransitions()) {
+					String tp = path.get(t.to);
+					String np = p + t.min;
+					if (tp == null || (tp.length() == np.length() && np.compareTo(tp) < 0)) {
+						if (tp == null)
+							queue.addLast(t.to);
+						path.put(t.to, np);
+					}
+				}
+		}
+		return best;
+	}
+
+	public static String getVerticalShortestExample(Automaton a, boolean accepted, Production p1, Production p2, Parser parser, boolean parse_every_string) {
+		if (a.isSingleton()) {
+			if (accepted)
+				return a.singleton;
+			else if (a.singleton.length() > 0)
+				return "";
+			else
+				return "\u0000";
+
+		}
+		return getVerticalShortestExample(a.getInitialState(), accepted, p1, p2, parser, parse_every_string);
+	}
+
+	static String getVerticalShortestExample(State s, boolean accepted, Production p1, Production p2, Parser parser, boolean parse_every_string) {
+		Map<State,String> path = new HashMap<State,String>();
+		LinkedList<State> queue = new LinkedList<State>();
+		path.put(s, "");
+		queue.add(s);
+		String best = null;
+		while (!queue.isEmpty()) {
+			State q = queue.removeFirst();
+			String p = path.get(q);
+			if (q.accept == accepted) {
+                String msg = "accepted," + p + ",length: " + p.length();
+                if (parse_every_string) {
+                    boolean a_certain = parser.check(p, p1) && parser.check(p, p2);
+                    msg = msg + ", certain: " + a_certain;
+                    System.out.println("\n==> " + msg);
+                    if (a_certain) {
+                        System.out.println("ambiguous string: " + p);
+                        System.exit(0);
+                    }
+                } else {
+                    System.out.println("\n==> " +  msg);
+                }
+
 				if (best == null || p.length() < best.length() || (p.length() == best.length() && p.compareTo(best) < 0))
 					best = p;
 			} else 
 				for (Transition t : q.getTransitions()) {
 					String tp = path.get(t.to);
+					String np = p + t.min;
+					if (tp == null || (tp.length() == np.length() && np.compareTo(tp) < 0)) {
+						if (tp == null)
+							queue.addLast(t.to);
+						path.put(t.to, np);
+					}
+				}
+		}
+		return best;
+	}
+	
+	public static String getHorizontalShortestExample(Automaton a, boolean accepted, Production prod, int index, Parser parser, boolean parse_every_string) {
+		if (a.isSingleton()) {
+			if (accepted)
+				return a.singleton;
+			else if (a.singleton.length() > 0)
+				return "";
+			else
+				return "\u0000";
+
+		}
+		return getHorizontalShortestExample(a.getInitialState(), accepted, prod, index, parser, parse_every_string);
+	}
+
+	static String getHorizontalShortestExample(State s, boolean accepted, Production prod, int index, Parser parser, boolean parse_every_string) {
+		Map<State,String> path = new HashMap<State,String>();
+		LinkedList<State> queue = new LinkedList<State>();
+		path.put(s, "");
+		queue.add(s);
+		String best = null;
+		while (!queue.isEmpty()) {
+			State q = queue.removeFirst();
+			String p = path.get(q);
+			if (q.accept == accepted) {  
+                Production p1 = new Production("$", prod.getEntities().subList(0, index), false, prod.getID(), 0);
+                Production p2 = new Production("$", prod.getEntities().subList(index, prod.getEntities().size()), false, prod.getID(), 0);
+                HorizontalOverlapString h = null;
+                StringBuilder b = new StringBuilder();
+                if (s != null) {
+                    int i = 0;
+                    while (p.charAt(i*2) == '\u0000') {
+                        b.append(p.charAt(i*2+1));
+                        i++;
+                    }
+                    int i1 = i++;
+                    while (p.charAt(i*2) == '\u0000') {
+                        b.append(p.charAt(i*2+1));
+                        i++;
+                    }
+                    int i2 = (i++)-1;
+                    while (i*2+1 < p.length()) {
+                        b.append(p.charAt(i*2+1));
+                        i++;
+                    }
+                    h = new HorizontalOverlapString(b.toString(), i1, i2);
+                }
+                String msg = "accepted," + h.getString() + ",length: " + h.getString().length();
+                if (parse_every_string) {
+                    boolean a_certain = parser.check(h.getX(), p1) 
+                        && parser.check(h.getXA(), p1) 
+                        && parser.check(h.getY(), p2) 
+                        && parser.check(h.getAY(), p2);
+                    msg = msg + ", certain: " + a_certain;
+                    System.out.println("\n==> " + msg);
+                    if (a_certain) {
+                        System.out.println("ambiguous string: " + h.getString());
+                        System.exit(0);
+                    }
+                } else {
+                    System.out.println("\n==> " +  msg);
+                }
+				if (best == null || p.length() < best.length() || (p.length() == best.length() && p.compareTo(best) < 0))
+					best = p;
+
+			} else 
+				for (Transition t : q.getTransitions()) {
+					String tp = path.get(t.to);
 					String np = p + t.min;
 					if (tp == null || (tp.length() == np.length() && np.compareTo(tp) < 0)) {
 						if (tp == null)
